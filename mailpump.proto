// Protobuf definitions for mailpump.
package mailpump;

// A verdict on the expected qualtiy of a message.
message QualityVerdict {
	// The final verdict category.
	enum VerdictType {
		OK = 0;
		SPAM = 1;
	}

	// Source of the verdict.
	required string source = 1;

	// Verdict result category.
	required VerdictType verdict = 2;

	// Optional score associated with the verdict.
	optional double score = 3;
}

// Representation of an e-mail, including important pieces of metadata.
message MailMessage {
	// Representation of an e-mail header.
	message MailHeader {
		required string name = 1;
		repeated string value = 2;
	}

	// String representation of the IP address of the peer.
	required string smtp_peer = 1;

	// DNS reverse record of the peer, if any.
	repeated string smtp_peer_revdns = 2;

	// TLS method information from the peer connection.
	optional string smtp_peer_tls_info = 3;

	// MAIL From parameter from the SMTP conversation.
	required string smtp_from = 4;

	// RCPT To parameter from the SMTP conversation.
	repeated string smtp_to = 5;

	// HELO parameter from the SMTP conversation.
	required string smtp_helo = 6;

	// Extracted Sender header from the mail headers, if any.
	optional string sender_hdr = 7;

	// Extracted From header from the e-mail headers.
	required string from_hdr = 8;

	// Extracted To header from the e-mail headers.
	repeated string to_hdr = 9;

	// Extracted CC header from the e-mail headers.
	repeated string cc_hdrs = 10;

	// Extracted Date header value.
	optional int64 date_hdr = 11;

	// Extracted message ID string form the e-mail headers.
	required string msgid_hdr = 12;

	// All extracted mail headers.
	repeated MailHeader headers = 13;

	// The full e-mail body.
	optional bytes body = 14;

	// Evaluation results from SPAM filters and similar.
	repeated QualityVerdict verdicts = 15;
}

// SMTP result code to be reported back to the client.
message MailSubmissionResult {
	// SMTP error code to return (if appropriate).
	optional int32 error_code = 1;

	// Text representation of an error, if any.
	optional string error_text = 2;
}

// Delivery options.
message DomainDeliveryConfiguration {
	// Different supported types of delivery.
	enum DeliveryMethod {
		// Deliver to a host via SMTP.
		SMTP = 1;
	}

	// The domain to be accepted or delivered.
	required string domain_name = 1;

	// The method to deliver mail from mailpump to the domain.
	required DeliveryMethod delivery_method = 2;

	// Destination server for delivery methods which require one.
	optional string destination_server = 3;
}

// The basic mailpump configuration.
message MailPumpConfiguration {
	// Delivery option.
	repeated DomainDeliveryConfiguration domain_configs = 1;

	// Write a log of all mail metadata to this file if given.
	optional string log_file_pattern = 2;

	// host:port pair to bind the server to.
	optional string bind_to = 3 [default=":0"];

	// Path to the X.509 certificate of this service.
	optional string x509_cert = 4 [default="mailstream.crt"];

	// Path to the X.509 key of this service.
	optional string x509_key = 5 [default="mailstream.key"];

	// Path to the CA certificate clients will be checked against.
	optional string x509_ca_cert = 6 [default="cacert.crt"];

	// Doozer URI for lock services.
	optional string doozer_uri = 7;

	// Doozer boot URI for finding the right lock service cluster.
	optional string doozer_boot_uri = 8;

	// Name of the exported port on the lock service.
	optional string service_name = 9 [default="mailstream"];

	// Disable the use of client certificates (for development/debugging).
	optional bool insecure = 10 [default=false];

	// host:port pair of a SpamAssassin instance.
	optional string spamd_host = 11 [default="localhost:578"];
}

service MailSubmissionService {
	rpc Send (MailMessage) returns (MailSubmissionResult);
}
